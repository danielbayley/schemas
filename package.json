{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://cdn.statically.io/gh/danielbayley/schemas/refs/heads/json/package.json",
  "title": "package.json",
  "description": "Specifics of npm's package.json handling",
  "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json",
  "$defs": {
    "person": {
      "description": "The 'author' is one person. 'contributors' is an array of people. A 'person' is an object with a 'name' field and optionally 'url' and 'email'.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#people-fields-author-contributors",
      "anyOf": [
        {
          "type": "string",
          "pattern": "^.+(\\s+<.+@.+\\..{2,}>)?(\\s+\\(https?:\\/\\/.+\\..{2,}\\))?$"
        },
        {
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "funding": {
      "description": "You can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, a string URL, or an array of objects and string URLs.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#funding",
      "oneOf": [
        {
          "type": "string",
          "format": "uri"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "minLength": 1
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "dependency": {
      "description": "Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#dependencies",
      "propertyNames": {
        "$ref": "/schemas/refs/heads/json/npm-package-name.json"
      },
      "additionalProperties": {
        "$ref": "/schemas/refs/heads/json/npm-semver.json"
      },
      "type": "object",
      "minProperties": 1
    },
    "engine": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "version": {
          "$ref": "/schemas/refs/heads/json/npm-semver.json"
        },
        "onFail": {
          "type": "string",
          "enum": [
            "warn",
            "error",
            "ignore"
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "minProperties": 1
    }
  },
  "type": "object",
  "required": [
    "name",
    "version"
  ],
  "properties": {
    "name": {
      "description": "The name is what your thing is called.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#name",
      "$ref": "/schemas/refs/heads/json/npm-package-name.json"
    },
    "version": {
      "description": "Version must be parseable by node-semver, which is bundled with npm as a dependency.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#version",
      "$ref": "/schemas/refs/heads/json/semver.json"
    },
    "description": {
      "description": "Put a description in it. It's a string. This helps people discover your package, as it's listed in npm search.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#description-1",
      "type": "string"
    },
    "keywords": {
      "description": "Put keywords in it. It's an array of strings. This helps people discover your package as it's listed in npm search.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#keywords",
      "items": {
        "pattern": "^[a-z-]+$",
        "type": "string",
        "minLength": 1
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "homepage": {
      "description": "The URL to the project homepage.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#homepage",
      "type": "string",
      "format": "uri"
    },
    "bugs": {
      "description": "The URL to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#bugs",
      "anyOf": [
        {
          "type": "string",
          "format": "uri"
        },
        {
          "properties": {
            "url": {
              "type": "string",
              "format": "uri"
            },
            "email": {
              "type": "string",
              "format": "email"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "license": {
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#license",
      "$ref": "/schemas/refs/heads/json/license.json",
      "description": "markdown.nth(102)"
    },
    "author": {
      "$ref": "#/$defs/person"
    },
    "contributors": {
      "items": {
        "$ref": "#/$defs/person"
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "maintainers": {
      "items": {
        "$ref": "#/$defs/person"
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "funding": {
      "oneOf": [
        {
          "items": {
            "$ref": "#/$defs/funding"
          },
          "uniqueItems": true,
          "type": "array",
          "minItems": 1
        },
        {
          "$ref": "#/$defs/funding"
        }
      ]
    },
    "files": {
      "description": "The optional files field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. File patterns follow a similar syntax to .gitignore, but reversed: including a file, directory, or glob pattern will make it so that file is included in the tarball when it's packed. Omitting the field will make it default to '*', which means it will include all files.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#files",
      "items": {
        "not": {
          "anyOf": [
            {
              "pattern": "^(?i)README(\\.(md|mkdn|mdwn|mdown|markdown|mdx|litcoffee))?$"
            },
            {
              "pattern": "^(?i)LICEN[SC]E(\\.(md|mkdn|mdwn|mdown|markdown|mdx|litcoffee))?$"
            },
            {
              "pattern": "^.*\\.orig$"
            },
            {
              "pattern": "^\\..*\\.swp$"
            },
            {
              "pattern": "^\\._.*$"
            },
            {
              "enum": [
                "package.json",
                "README",
                "LICENSE",
                ".DS_Store",
                ".git",
                ".hg",
                ".lock-wscript",
                ".npmrc",
                ".svn",
                ".wafpickle-N",
                "CVS",
                "config.gypi",
                "node_modules",
                "npm-debug.log",
                "package-lock.json",
                "pnpm-lock.yaml",
                "yarn.lock"
              ]
            }
          ]
        },
        "type": "string",
        "minLength": 1
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "exports": {
      "description": "The 'exports' provides a modern alternative to 'main' allowing multiple entry points to be defined, conditional entry resolution support between environments, and preventing any other entry points besides those defined in 'exports'. This encapsulation allows module authors to clearly define the public interface for their package. For more details see the node.js documentation on package entry points.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#exports",
      "additionalProperties": true,
      "type": "object",
      "minProperties": 1
    },
    "main": {
      "description": "The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require, then your main module's exports object will be returned.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#main",
      "anyOf": [
        {
          "$ref": "/schemas/refs/heads/json/npm-package-name.json"
        },
        {
          "type": "string",
          "pattern": "[^/]+\\.[mc]?[tj]sx?$"
        }
      ]
    },
    "browser": {
      "description": "If your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren't available in Node.js modules. (e.g. `window`)",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#browser",
      "oneOf": [
        {
          "type": "string",
          "pattern": "[^/]+\\.[mc]?[tj]sx?$"
        },
        {
          "propertyNames": {
            "anyOf": [
              {
                "$ref": "/schemas/refs/heads/json/npm-package-name.json"
              },
              {
                "type": "string",
                "pattern": "[^/]+\\.[mc]?[tj]sx?$"
              }
            ]
          },
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "[^/]+\\.[mc]?[tj]sx?$"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "bin": {
      "description": "A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy\n\nTo use this, supply a bin field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be either linked inside the global bins directory or a cmd will be created which executes the specified file in the bin field, so it is available to run by name or name.cmd. When this package is installed as a dependency in another package, the file will be linked where it will be available to that package either directly by npm exec or by name in other scripts when invoking them via npm run-script.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#bin",
      "oneOf": [
        {
          "type": "string",
          "pattern": "[^/]+\\.[mc]?[tj]sx?$"
        },
        {
          "additionalProperties": {
            "type": "string",
            "pattern": "[^/]+\\.[mc]?[tj]sx?$"
          },
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "man": {
      "description": "Specify either a single file or an array of filenames to put in place for the man program to find.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#man",
      "oneOf": [
        {
          "pattern": "^(\\.\\/)?man\\/[a-z]+(\\.[1-8])?$",
          "maxLength": 260
        },
        {
          "items": {
            "pattern": "^(\\.\\/)?man\\/[a-z]+(\\.[1-8])?$",
            "maxLength": 260
          },
          "uniqueItems": true,
          "type": "array",
          "minItems": 1
        }
      ]
    },
    "directories": {
      "description": "The CommonJS Packages spec details a few ways that you can indicate the structure of your package using a directories object. If you look at npm's package.json, you'll see that it has directories for doc, lib, and man.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#directories",
      "additionalProperties": {
        "pattern": "^([~.]?\\/|[\\w\\s])+?(\\/[^/]+?)+\\/?$",
        "maxLength": 260
      },
      "type": "object",
      "minProperties": 1
    },
    "repository": {
      "description": "Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the npm repo command will be able to find you.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#repository",
      "oneOf": [
        {
          "type": "string",
          "format": "uri"
        },
        {
          "required": [
            "url"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "git"
              ]
            },
            "url": {
              "type": "string",
              "oneOf": [
                {
                  "format": "uri"
                },
                {
                  "pattern": "^(git\\+)?https?:\\/\\/.+(\\.git)?$"
                }
              ]
            },
            "directory": {
              "pattern": "^([~.]?\\/|[\\w\\s])+?(\\/[^/]+?)+\\/?$",
              "maxLength": 260
            }
          },
          "additionalProperties": false,
          "type": "object",
          "minProperties": 1
        }
      ]
    },
    "scripts": {
      "description": "The 'scripts' property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.",
      "$comment": "https://docs.npmjs.com/cli/using-npm/scripts",
      "properties": {
        "lint": {
          "type": "string",
          "minLength": 1
        },
        "test": {
          "type": "string",
          "minLength": 1
        },
        "watch": {
          "type": "string",
          "minLength": 1
        },
        "clean": {
          "type": "string",
          "minLength": 1
        }
      },
      "type": "object",
      "minProperties": 1
    },
    "config": {
      "description": "A 'config' object can be used to set configuration parameters used in package scripts that persist across upgrades.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#config",
      "additionalProperties": {
        "type": "string",
        "minLength": 1
      },
      "type": "object",
      "minProperties": 1
    },
    "dependencies": {
      "description": "Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#dependencies",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "devDependencies": {
      "description": "If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#devdependencies",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "peerDependencies": {
      "description": "In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a require of this host. This is usually referred to as a plugin. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#peerDependencies",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "peerDependenciesMeta": {
      "description": "The peerDependenciesMeta field serves to provide npm more information on how your peer dependencies are to be used. Specifically, it allows peer dependencies to be marked as optional. Npm will not automatically install optional peer dependencies. This allows you to integrate and interact with a variety of host packages without requiring all of them to be installed.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#peerDependenciesMeta"
    },
    "bundleDependencies": {
      "description": "This defines an array of package names that will be bundled when publishing the package.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#bundleDependencies",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "optionalDependencies": {
      "description": "If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object. This is a map of package name to version or URL, just like the dependencies object. The difference is that build failures do not cause installation to fail. Running npm install --omit=optional will prevent these dependencies from being installed.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#optionalDependencies",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "overrides": {
      "description": "If you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an existing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#overrides",
      "type": "object",
      "minProperties": 1,
      "$ref": "#/$defs/dependency"
    },
    "engines": {
      "description": "You can specify the version of node that your stuff works on.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#engines",
      "propertyNames": {
        "enum": [
          "node",
          "npm",
          "pnpm",
          "yarn",
          "bun"
        ],
        "type": "string",
        "minLength": 1
      },
      "additionalProperties": {
        "$ref": "/schemas/refs/heads/json/npm-semver.json"
      },
      "type": "object",
      "minProperties": 1
    },
    "os": {
      "description": "You can specify which operating systems your module will run on.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#os",
      "items": {
        "type": "string",
        "enum": [
          "aix",
          "!aix",
          "darwin",
          "!darwin",
          "freebsd",
          "!freebsd",
          "linux",
          "!linux",
          "openbsd",
          "!openbsd",
          "sunos",
          "!sunos",
          "win32",
          "!win32"
        ]
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "cpu": {
      "description": "If your code only runs on certain cpu architectures, you can specify which ones.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#cpu",
      "items": {
        "type": "string",
        "enum": [
          "arm",
          "!arm",
          "arm64",
          "!arm64",
          "ia32",
          "!ia32",
          "loong64",
          "!loong64",
          "mips",
          "!mips",
          "mipsel",
          "!mipsel",
          "ppc",
          "!ppc",
          "ppc64",
          "!ppc64",
          "riscv64",
          "!riscv64",
          "s390",
          "!s390",
          "s390x",
          "!s390x",
          "and",
          "!and",
          "x64",
          "!x64"
        ]
      },
      "uniqueItems": true,
      "type": "array",
      "minItems": 1
    },
    "devEngines": {
      "description": "The devEngines field aids engineers working on a codebase to all be using the same tooling.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#devengines",
      "properties": {
        "cpu": {
          "$ref": "#/$defs/engine",
          "name": {
            "enum": [
              "arm",
              "!arm",
              "arm64",
              "!arm64",
              "ia32",
              "!ia32",
              "loong64",
              "!loong64",
              "mips",
              "!mips",
              "mipsel",
              "!mipsel",
              "ppc",
              "!ppc",
              "ppc64",
              "!ppc64",
              "riscv64",
              "!riscv64",
              "s390",
              "!s390",
              "s390x",
              "!s390x",
              "and",
              "!and",
              "x64",
              "!x64"
            ]
          }
        },
        "os": {
          "$ref": "#/$defs/engine",
          "name": {
            "enum": [
              "aix",
              "!aix",
              "darwin",
              "!darwin",
              "freebsd",
              "!freebsd",
              "linux",
              "!linux",
              "openbsd",
              "!openbsd",
              "sunos",
              "!sunos",
              "win32",
              "!win32"
            ]
          }
        },
        "libc": {
          "$ref": "#/$defs/engine"
        },
        "runtime": {
          "$ref": "#/$defs/engine",
          "$comment": "https://runtime-keys.proposal.wintercg.org#keys",
          "properties": {
            "name": {
              "enum": [
                "edge-routine",
                "azion",
                "workerd",
                "deno",
                "lagon",
                "react-native",
                "moddable",
                "netlify",
                "electron",
                "node",
                "bun",
                "react-server",
                "edge-light",
                "fastly",
                "kiesel",
                "wasmer"
              ]
            }
          }
        },
        "packageManager": {
          "$ref": "#/$defs/engine",
          "$comment": "https://nodejs.org/api/packages.html#packagemanager",
          "properties": {
            "name": {
              "enum": [
                "npm",
                "pnpm",
                "yarn",
                "bun"
              ]
            }
          }
        }
      },
      "additionalProperties": false,
      "type": "object",
      "minProperties": 1
    },
    "packageManager": {
      "description": "The 'packageManager' field defines which package manager is expected to beused when working on the current project. It can be set to any of thesupported package managers, and will ensure that your teams use the exactsame package manager versions without having to install anything else other thanNode.js.",
      "$comment": "https://nodejs.org/api/packages.html#packagemanager",
      "pattern": "^(npm|pnpm|yarn|bun)@\\d+\\.\\d+\\.\\d+(-.+)?$",
      "type": "string",
      "minLength": 1
    },
    "private": {
      "type": "boolean",
      "description": "If you set 'private': true in your package.json, then npm will refuse to publish it.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#private"
    },
    "publishConfig": {
      "$ref": "#/$defs/config",
      "description": "This is a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default.",
      "$comment": "https://docs.npmjs.com/cli/v10/configuring-npm/package-json#publishconfig"
    },
    "workspaces": {
      "$comment": "https://docs.npmjs.com/cli/using-npm/workspaces",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "workspaces": {
          "items": {
            "pattern": "^([~.]?\\/|[\\w\\s])+?(\\/[^/]+?)+\\/?$",
            "maxLength": 260
          },
          "uniqueItems": true,
          "type": "array",
          "minItems": 1
        }
      },
      "additionalProperties": false,
      "type": "object",
      "minProperties": 1
    }
  }
}
